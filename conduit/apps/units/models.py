from django.db import models
from conduit.apps.core.models import TimestampModel


class Unit(TimestampModel):
    parent = models.ForeignKey("self", null=True, blank=True,related_name="children", on_delete=models.CASCADE)
    owner = models.ForeignKey('authentication.User', related_name='ownedunits', on_delete=models.CASCADE)
    unittypes = ((0, 'city'), (1, 'line'), (2, 'unit'))
    type = models.SmallIntegerField(choices=unittypes)
    name = models.CharField(db_index=True, max_length=255)
    voltage = models.CharField(db_index=True, max_length=32, blank=True)
    phonenum = models.CharField(db_index=True, max_length=32, blank=True)
    backphonenum = models.CharField(max_length=32, blank=True)
    backphoneused = models.BooleanField(max_length=32, default=False)
    sn = models.CharField(db_index=True, max_length=32, blank=True)
    location = models.CharField(db_index=True, max_length=32, blank=True)
    towerfrom = models.IntegerField(blank=True, null=True)
    towerto = models.IntegerField(blank=True, null=True)
    idintower = models.IntegerField(blank=True, null=True)
    identity = models.CharField(max_length=64, blank=True)
    temperature = models.IntegerField(blank=True, null=True)
    protocolversion = models.IntegerField(blank=True, null=True)
    hardwareversion = models.IntegerField(blank=True, null=True)
    lat = models.FloatField(blank=True, null=True)
    lng = models.FloatField(blank=True, null=True)
    unsync = models.BooleanField(default=False)
    active = models.BooleanField(default=True)
    operators = models.ManyToManyField('authentication.User', related_name='units',symmetrical=False, blank=True)
    status = models.SmallIntegerField(blank=True, null=True)
    powerstatus = models.SmallIntegerField(blank=True, null=True)
    gprsstatus = models.SmallIntegerField(blank=True, null=True)
    carrier = models.SmallIntegerField(blank=True, null=True)
    backupcarrier = models.SmallIntegerField(blank=True, null=True)
    vendor = models.SmallIntegerField(blank=True, null=True)
    remark = models.CharField(max_length=255, blank=True)

    def __str__(self):
        return self.name


class UnitAlertSettings(TimestampModel):
    unit = models.OneToOneField("units.Unit", on_delete=models.CASCADE)
    alertdistance1 = models.IntegerField()
    alertdistance2 = models.IntegerField()
    alertdistance3 = models.IntegerField()
    picresolution = models.CharField(max_length=32, default="800x600")
    picenable = models.BooleanField(default=True)
    piclightenhance = models.BooleanField(default=True)
    highsensitivity = models.BooleanField(default=False)
    beep = models.BooleanField(default=True)
    weather = models.BooleanField(default=False)
    mode = models.IntegerField()
    camera1mode = models.SmallIntegerField()
    camera1videoduration = models.SmallIntegerField()
    camera1videoframerate = models.SmallIntegerField()
    camera1mediainterval = models.SmallIntegerField()
    camera2mode = models.SmallIntegerField()
    camera2videoduration = models.SmallIntegerField()
    camera2videoframerate = models.SmallIntegerField()
    camera2mediainterval = models.SmallIntegerField()
    camera3mode = models.SmallIntegerField()
    camera3videoduration = models.SmallIntegerField()
    camera3videoframerate = models.SmallIntegerField()
    camera3mediainterval = models.SmallIntegerField()

class UnitNetworkSettings(TimestampModel):
    unit = models.OneToOneField("units.Unit", on_delete=models.CASCADE)
    serverip = models.CharField(max_length=32, default="121.41.25.64")
    serverport = models.IntegerField()
    transfertype = models.SmallIntegerField()
    networktype = models.SmallIntegerField()
    apn = models.CharField(max_length=32, blank=True)
    apnusername = models.CharField(max_length=32, blank=True)
    apnpassword = models.CharField(max_length=32, blank=True)
    timeout = models.IntegerField()
    retrycount = models.IntegerField()
    resetcount = models.IntegerField()
    csq = models.IntegerField()
    networkstatus = models.IntegerField()
